$date
	Thu Dec  6 10:05:19 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module PE $end
$var wire 1 ! clk $end
$var wire 1 " pendpc $end
$var wire 1 # pendz $end
$var wire 1 $ reset $end
$var wire 16 % subf_res [15:0] $end
$var wire 16 & recf_res [15:0] $end
$var wire 16 ' mulf_res [15:0] $end
$var wire 16 ( itof_res [15:0] $end
$var wire 16 ) ftoi_res [15:0] $end
$var wire 16 * addf_res [15:0] $end
$var reg 1 + halt $end
$var reg 1 , havepre $end
$var reg 16 - im0 [15:0] $end
$var reg 16 . ir [15:0] $end
$var reg 16 / ir0 [15:0] $end
$var reg 16 0 ir1 [15:0] $end
$var reg 1 1 jump $end
$var reg 16 2 pc [15:0] $end
$var reg 16 3 pc0 [15:0] $end
$var reg 12 4 prefix [11:0] $end
$var reg 16 5 rd1 [15:0] $end
$var reg 16 6 res [15:0] $end
$var reg 16 7 rn1 [15:0] $end
$var reg 16 8 target [15:0] $end
$var reg 16 9 tpc [15:0] $end
$var reg 1 : wait1 $end
$var reg 1 ; wait2 $end
$var reg 1 < zreg $end
$scope function iscond $end
$var reg 16 = inst [15:0] $end
$var reg 1 > iscond $end
$upscope $end
$scope function setspc $end
$var reg 16 ? inst [15:0] $end
$var reg 1 @ setspc $end
$upscope $end
$scope function setsrd $end
$var reg 16 A inst [15:0] $end
$var reg 1 B setsrd $end
$upscope $end
$scope function setsz $end
$var reg 16 C inst [15:0] $end
$var reg 1 D setsz $end
$upscope $end
$scope function usesim $end
$var reg 16 E inst [15:0] $end
$var reg 1 F usesim $end
$upscope $end
$scope function usesrd $end
$var reg 16 G inst [15:0] $end
$var reg 1 H usesrd $end
$upscope $end
$scope function usesrn $end
$var reg 16 I inst [15:0] $end
$var reg 1 J usesrn $end
$upscope $end
$scope module addf_mod $end
$var wire 16 K a [15:0] $end
$var wire 16 L b [15:0] $end
$var wire 1 ! clk $end
$var wire 9 M small_man [8:0] $end
$var wire 8 N shift_out [7:0] $end
$var wire 7 O b_man [6:0] $end
$var wire 8 P b_exp [7:0] $end
$var wire 7 Q a_man [6:0] $end
$var wire 8 R a_exp [7:0] $end
$var reg 9 S big_man [8:0] $end
$var reg 16 T out [15:0] $end
$var reg 8 U shift_amt [7:0] $end
$var reg 8 V shift_in [7:0] $end
$scope module addf_bs $end
$var wire 8 W shift [7:0] $end
$var wire 8 X src [7:0] $end
$var reg 16 Y by1 [15:0] $end
$var reg 16 Z by2 [15:0] $end
$var reg 16 [ by4 [15:0] $end
$var reg 8 \ dst [7:0] $end
$upscope $end
$upscope $end
$scope module ftoi_mod $end
$var wire 1 ! clk $end
$var wire 16 ] in [15:0] $end
$var wire 1 ^ sign $end
$var reg 16 _ exp_less_bias [15:0] $end
$var reg 8 ` exponent [7:0] $end
$var reg 23 a left_shift [22:0] $end
$var reg 16 b man_pad [15:0] $end
$var reg 23 c mantissa [22:0] $end
$var reg 16 d out [15:0] $end
$var reg 16 e out_temp [15:0] $end
$upscope $end
$scope module itof_mod $end
$var wire 1 ! clk $end
$var wire 16 f in [15:0] $end
$var wire 16 g zero_count_input [15:0] $end
$var wire 1 h sign $end
$var wire 5 i d [4:0] $end
$var reg 8 j exponent [7:0] $end
$var reg 7 k extra_zeros [6:0] $end
$var reg 23 l in_plus_zeros [22:0] $end
$var reg 7 m mantissa [6:0] $end
$var reg 16 n out [15:0] $end
$var reg 23 o twos_in_plus_zeros [22:0] $end
$scope module zero_counter $end
$var wire 16 p s [15:0] $end
$var reg 5 q d [4:0] $end
$var reg 2 r s2 [1:0] $end
$var reg 4 s s4 [3:0] $end
$var reg 8 t s8 [7:0] $end
$upscope $end
$upscope $end
$scope module mulf_mod $end
$var wire 16 u a [15:0] $end
$var wire 16 v b [15:0] $end
$var wire 1 ! clk $end
$var wire 1 w diff_sign $end
$var reg 16 x out [15:0] $end
$var reg 8 y out_exp [7:0] $end
$var reg 7 z out_man [6:0] $end
$var reg 8 { temp_exponent [7:0] $end
$var reg 16 | temp_mantissa [15:0] $end
$upscope $end
$scope module recf_mod $end
$var wire 1 ! clk $end
$var wire 16 } in [15:0] $end
$var reg 8 ~ buff [7:0] $end
$var reg 16 !" out [15:0] $end
$var reg 8 "" out_exp [7:0] $end
$var reg 7 #" out_man [6:0] $end
$upscope $end
$scope module subf_mod $end
$var wire 16 $" a [15:0] $end
$var wire 16 %" b [15:0] $end
$var wire 1 ! clk $end
$var reg 16 &" out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
xw
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
b0 k
bx j
bx i
xh
bx g
bx f
bx e
bx d
bx c
b1 b
bx a
bx `
bx _
x^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
b1xxxxxxx M
bx L
bx K
xJ
bx I
xH
bx G
xF
bx E
0D
b0 C
0B
b0 A
0@
b0 ?
x>
bx =
x<
x;
x:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
b0 2
01
b0 0
b0 /
bx .
bx -
0,
0+
bx *
bx )
bx (
bx '
bx &
bx %
0$
0#
0"
0!
$end
#10
1$
#20
0$
#30
b10000 i
b10000 q
b0 g
b0 p
0w
b0 P
b0 O
0^
0h
b0 R
b0 Q
b0 3
b1 2
b10000101100 4
1,
b0 7
b0 L
b0 ]
b0 f
b0 v
b0 }
b0 %"
b0 5
b0 K
b0 u
b0 $"
0;
b0xxxxxxx N
b0xxxxxxx \
b0xxxxxxx [
b0xxxxxxx Z
b0xxxxxxx Y
bx0000000 o
bx0000000 l
b1xxxxxxx c
b1xxxxxxx S
b0xxxxxxx V
b0xxxxxxx X
0>
b10000101100 =
b10000101100 .
b0 9
0F
b0 E
0:
1J
b0 I
0H
b0 G
1!
#40
0!
#50
b10111101001000 C
1B
b10111101001000 A
b10111101001000 ?
b1 3
b10 2
b10111101001000 /
0,
b100001011001000 -
0F
b0 E
b10111101001000 =
b10111101001000 .
b1 9
b0 *
b0 T
b0xxxxxxxxxxxxxxx &
b0xxxxxxxxxxxxxxx !"
b100000010000000 '
b100000010000000 x
b0 z
b10000001 y
b100000000000000 |
b0 {
b0 )
b0 d
b0 e
b0 a
b1111111110000001 _
b10000000 c
b0 `
b0 (
b0 n
1!
#60
0!
#70
b1 r
b100 s
b1000010 t
b1 i
b1 q
b0 C
b0 ?
b10000101 P
b1001000 O
b100001011001000 g
b100001011001000 p
b10 3
b11 2
b0 /
b10000001010 4
1,
b10111101001000 0
b100001011001000 7
b100001011001000 L
b100001011001000 ]
b100001011001000 f
b100001011001000 v
b100001011001000 }
b100001011001000 %"
b0xxxxxxxxxxxxxxx &
b0xxxxxxxxxxxxxxx !"
b10000001010 =
b10000001010 .
b10 9
1F
b10111101001000 E
0J
b10111101001000 I
b10111101001000 G
0B
b0 A
1!
#80
0!
#90
b10000 i
b10000 q
b0 P
b0 O
b0 g
b0 p
b0 ?
b0 0
b0 7
b0 L
b0 ]
b0 f
b0 v
b0 }
b0 %"
b11 3
b100 2
b10001101000000 /
0,
b100000010100000 -
b0 C
b100001011001000 6
0F
1J
b0 I
b0 G
0B
b0 A
b0 E
b10001101000000 =
b10001101000000 .
b11 9
b100001011001000 *
b100001011001000 T
b11110000010001 &
b11110000010001 !"
b10001 #"
b100011 ~
b1111000 ""
b1101001000 '
b1101001000 x
b1001000 z
b110 y
b110010000000000 |
b10000101 {
b1100100 )
b1100100 d
b1100100 e
b11001000000000 a
b110 _
b11001000 c
b10000101 `
b100011010000101 (
b100011010000101 n
b10001101 j
b101 m
b10111101001110000000000 o
b1000010110010000000000 l
1!
#100
0!
#110
x#
x"
b1000000 t
b1 i
b1 q
xD
x@
bx C
xB
bx A
bx ?
b10000001 P
b100000 O
b100000010100000 g
b100000010100000 p
b10000101 R
b1001000 Q
b100 3
b101 2
bx /
b10001101000000 0
b100000010100000 7
b100000010100000 L
b100000010100000 ]
b100000010100000 f
b100000010100000 v
b100000010100000 }
b100000010100000 %"
b100001011001000 5
b100001011001000 K
b100001011001000 u
b100001011001000 $"
b0 (
b0 n
b0 )
b0 d
b0 e
b0 a
b1111111110000001 _
b10000000 c
b0 `
b100000010000000 '
b100000010000000 x
b0 z
b10000001 y
b100000000000000 |
b0 {
b11110000010001 &
b11110000010001 !"
b0 *
b0 T
x>
bx =
bx .
b100 9
xF
bx E
0J
b10001101000000 I
1H
b10001101000000 G
1!
#120
0!
#130
bx r
bx s
b0xxxx i
b0xxxx q
bx t
xw
bx P
bx O
x^
xh
bx g
bx p
bx R
bx Q
bx 7
bx L
bx ]
bx f
bx v
bx }
bx %"
bx 5
bx K
bx u
bx $"
b101 3
b110 2
b10000010 M
xD
bx C
x@
bx ?
b10 N
b10 \
b10 [
b100000 Z
b100000 Y
bx 0
1;
xJ
bx I
xH
bx G
xB
bx A
b101 9
b11001000 S
b100000 V
b100000 X
b100 U
b100 W
b11111000100110 &
b11111000100110 !"
b100110 #"
b1001100 ~
b1111100 ""
b100001111111010 '
b100001111111010 x
b1111010 z
b10000111 y
b111110100000000 |
b110 {
b101 )
b101 d
b101 e
b1010000000 a
b10 _
b10100000 c
b10000001 `
b100011010000001 (
b100011010000001 n
b1 m
b10111111011000000000000 o
b1000000101000000000000 l
1!
#140
0!
#150
b110 3
b111 2
1+
b1xxxxxxx M
b0xxxxxxx N
b0xxxxxxx \
b0xxxxxxx [
b0xxxxxxx Z
b0xxxxxxx Y
bx0000001 (
bx0000001 n
bx j
bx0000000 o
bx0000000 l
bx )
bx d
bx e
bx a
bx _
b1xxxxxxx c
bx `
bx100001111111010 '
bx100001111111010 x
bx |
bx {
bx &
bx !"
bx #"
bx ~
bx ""
b1xxxxxxx S
b0xxxxxxx V
b0xxxxxxx X
bx U
bx W
b110 9
0;
1!
#160
0!
