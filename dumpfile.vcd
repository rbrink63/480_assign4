$date
	Fri Dec  7 17:35:43 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module PE $end
$var wire 1 ! clk $end
$var wire 1 " pendpc $end
$var wire 1 # pendz $end
$var wire 1 $ reset $end
$var wire 16 % subf_res [15:0] $end
$var wire 16 & recf_res [15:0] $end
$var wire 16 ' mulf_res [15:0] $end
$var wire 16 ( itof_res [15:0] $end
$var wire 16 ) ftoi_res [15:0] $end
$var wire 16 * addf_res [15:0] $end
$var reg 1 + halt $end
$var reg 1 , havepre $end
$var reg 16 - im0 [15:0] $end
$var reg 16 . ir [15:0] $end
$var reg 16 / ir0 [15:0] $end
$var reg 16 0 ir1 [15:0] $end
$var reg 1 1 jump $end
$var reg 16 2 pc [15:0] $end
$var reg 16 3 pc0 [15:0] $end
$var reg 12 4 prefix [11:0] $end
$var reg 16 5 rd1 [15:0] $end
$var reg 16 6 res [15:0] $end
$var reg 16 7 rn1 [15:0] $end
$var reg 16 8 target [15:0] $end
$var reg 16 9 tpc [15:0] $end
$var reg 1 : wait1 $end
$var reg 1 ; wait2 $end
$var reg 1 < zreg $end
$scope function iscond $end
$var reg 16 = inst [15:0] $end
$var reg 1 > iscond $end
$upscope $end
$scope function setspc $end
$var reg 16 ? inst [15:0] $end
$var reg 1 @ setspc $end
$upscope $end
$scope function setsrd $end
$var reg 16 A inst [15:0] $end
$var reg 1 B setsrd $end
$upscope $end
$scope function setsz $end
$var reg 16 C inst [15:0] $end
$var reg 1 D setsz $end
$upscope $end
$scope function usesim $end
$var reg 16 E inst [15:0] $end
$var reg 1 F usesim $end
$upscope $end
$scope function usesrd $end
$var reg 16 G inst [15:0] $end
$var reg 1 H usesrd $end
$upscope $end
$scope function usesrn $end
$var reg 16 I inst [15:0] $end
$var reg 1 J usesrn $end
$upscope $end
$scope module addf_mod $end
$var wire 16 K a [15:0] $end
$var wire 16 L b [15:0] $end
$var wire 1 ! clk $end
$var wire 5 M num_zs [4:0] $end
$var wire 8 N b_man [7:0] $end
$var wire 8 O b_exp [7:0] $end
$var wire 8 P a_man [7:0] $end
$var wire 8 Q a_exp [7:0] $end
$var reg 8 R big_exp [7:0] $end
$var reg 9 S big_man [8:0] $end
$var reg 16 T out [15:0] $end
$var reg 8 U out_exp [7:0] $end
$var reg 7 V out_man [6:0] $end
$var reg 1 W out_sign $end
$var reg 8 X shift_amt [7:0] $end
$var reg 8 Y small_exp [7:0] $end
$var reg 9 Z small_man [8:0] $end
$var reg 9 [ temp_man [8:0] $end
$var reg 9 \ temp_man2 [8:0] $end
$scope module addf_zcount $end
$var wire 16 ] s [15:0] $end
$var reg 5 ^ d [4:0] $end
$var reg 2 _ s2 [1:0] $end
$var reg 4 ` s4 [3:0] $end
$var reg 8 a s8 [7:0] $end
$upscope $end
$upscope $end
$scope module ftoi_mod $end
$var wire 1 ! clk $end
$var wire 16 b in [15:0] $end
$var wire 1 c sign $end
$var reg 16 d exp_less_bias [15:0] $end
$var reg 8 e exponent [7:0] $end
$var reg 23 f left_shift [22:0] $end
$var reg 16 g man_pad [15:0] $end
$var reg 23 h mantissa [22:0] $end
$var reg 16 i out [15:0] $end
$var reg 16 j out_temp [15:0] $end
$upscope $end
$scope module itof_mod $end
$var wire 1 ! clk $end
$var wire 16 k in [15:0] $end
$var wire 16 l zero_count_input [15:0] $end
$var wire 1 m sign $end
$var wire 5 n d [4:0] $end
$var reg 8 o exponent [7:0] $end
$var reg 7 p extra_zeros [6:0] $end
$var reg 23 q in_plus_zeros [22:0] $end
$var reg 7 r mantissa [6:0] $end
$var reg 16 s out [15:0] $end
$var reg 23 t twos_in_plus_zeros [22:0] $end
$scope module zero_counter $end
$var wire 16 u s [15:0] $end
$var reg 5 v d [4:0] $end
$var reg 2 w s2 [1:0] $end
$var reg 4 x s4 [3:0] $end
$var reg 8 y s8 [7:0] $end
$upscope $end
$upscope $end
$scope module mulf_mod $end
$var wire 16 z a [15:0] $end
$var wire 16 { b [15:0] $end
$var wire 1 ! clk $end
$var wire 1 | diff_sign $end
$var reg 16 } out [15:0] $end
$var reg 8 ~ out_exp [7:0] $end
$var reg 7 !" out_man [6:0] $end
$var reg 8 "" temp_exponent [7:0] $end
$var reg 16 #" temp_mantissa [15:0] $end
$upscope $end
$scope module recf_mod $end
$var wire 1 ! clk $end
$var wire 16 $" in [15:0] $end
$var reg 8 %" buff [7:0] $end
$var reg 16 &" out [15:0] $end
$var reg 8 '" out_exp [7:0] $end
$var reg 7 (" out_man [6:0] $end
$upscope $end
$scope module subf_mod $end
$var wire 16 )" a [15:0] $end
$var wire 16 *" b [15:0] $end
$var wire 1 ! clk $end
$var reg 16 +" out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
x|
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
b0 p
bx o
bx n
xm
bx l
bx k
bx j
bx i
bx h
b1 g
bx f
bx e
bx d
xc
bx b
bx a
bx `
bx _
b0xxxx ^
bx0000000 ]
bx \
bx [
bx Z
bx Y
bx X
xW
bx V
bx U
bx T
b1xxxxxxx S
bx R
bx Q
b1xxxxxxx P
bx O
b1xxxxxxx N
b0xxxx M
bx L
bx K
xJ
bx I
xH
bx G
xF
bx E
0D
b0 C
0B
b0 A
0@
b0 ?
x>
bx =
x<
x;
x:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
b0 2
01
b0 0
b0 /
bx .
bx -
0,
0+
bx *
bx )
bx (
bx '
bx &
bx %
0$
0#
0"
0!
$end
#10
1$
#20
0$
#30
b10000 n
b10000 v
b0 l
b0 u
0|
b0 O
b10000000 N
0c
0m
bx *
bx T
b0 Q
b10000000 P
b0 3
b1 2
b110000001010 4
1,
b0 7
b0 L
b0 b
b0 k
b0 {
b0 $"
b0 *"
b0 5
b0 K
b0 z
b0 )"
0;
bx0000000 t
bx0000000 q
b1xxxxxxx h
0>
b110000001010 =
b110000001010 .
b0 9
0F
b0 E
0:
1J
b0 I
0H
b0 G
1!
#40
0!
#50
b10001101000000 C
1B
b10001101000000 A
b10001101000000 ?
b1 3
b10 2
b10001101000000 /
0,
b1100000010100000 -
0F
b0 E
b10001101000000 =
b10001101000000 .
b1 9
b0xxxxxxxxxxxxxxx &
b0xxxxxxxxxxxxxxx &"
b100000010000000 '
b100000010000000 }
b0 !"
b10000001 ~
b100000000000000 #"
b0 ""
b0 )
b0 i
b0 j
b0 f
b1111111110000001 d
b10000000 h
b0 e
b0 (
b0 s
1!
#60
0!
#70
b111110 V
b101111100 \
b11 w
b11 x
b111111 y
b10 n
b10 v
1|
b1 _
b101 `
b1 M
b1 ^
b1011111 a
b0 C
b0 ?
b10000001 O
b10100000 N
1c
1m
b11111101100000 l
b11111101100000 u
b100001010111110 *
b100001010111110 T
0W
b10000101 U
b101111100000000 ]
b10111110 [
b10000001 Y
b10000101 R
b1010 Z
b11001000 S
b100 X
b10000101 Q
b11001000 P
b10 3
b11 2
b0 /
b0 4
1,
b10001101000000 0
b1100000010100000 7
b1100000010100000 L
b1100000010100000 b
b1100000010100000 k
b1100000010100000 {
b1100000010100000 $"
b1100000010100000 *"
b100001011001000 5
b100001011001000 K
b100001011001000 z
b100001011001000 )"
b0xxxxxxxxxxxxxxx &
b0xxxxxxxxxxxxxxx &"
b0 =
b0 .
b10 9
1F
b10001101000000 E
0J
b10001101000000 I
1H
b10001101000000 G
0B
b0 A
1!
#80
0!
#90
b10000 n
b10000 v
b0 l
b0 u
0|
b0 O
b10000000 N
0c
0m
b100001010111110 *
b100001010111110 T
b0 Q
b10000000 P
b0 7
b0 L
b0 b
b0 k
b0 {
b0 $"
b0 *"
b0 5
b0 K
b0 z
b0 )"
b11 3
b100 2
b0 0
1;
0F
b0 E
1J
b0 I
0H
b0 G
0B
b0 A
b11 9
b1011111000100110 &
b1011111000100110 &"
b100110 ("
b1001100 %"
b1111100 '"
b1100001111111010 '
b1100001111111010 }
b1111010 !"
b10000111 ~
b111110100000000 #"
b110 ""
b1111111111111011 )
b1111111111111011 i
b101 j
b1010000000 f
b10 d
b10100000 h
b10000001 e
b1100011001111101 (
b1100011001111101 s
b10001100 o
b1111101 r
b111111011000000000000 t
b11000000101000000000000 q
1!
#100
0!
#110
0;
b0 (
b0 s
b0 )
b0 i
b0 j
b0 f
b1111111110000001 d
b10000000 h
b0 e
b100000010000000 '
b100000010000000 }
b0 !"
b10000001 ~
b100000000000000 #"
b0 ""
b11111000100110 &
b11111000100110 &"
b100 9
1:
1!
#120
0!
#130
0:
b11111000100110 &
b11111000100110 &"
1!
#140
0!
#150
b100 3
b101 2
b11111000100110 &
b11111000100110 &"
1!
#160
0!
#170
x#
x"
xD
bx C
x@
xB
bx A
bx ?
b101 3
b110 2
bx /
0F
b0 E
x>
bx =
bx .
b101 9
b11111000100110 &
b11111000100110 &"
1!
#180
0!
#190
bx w
bx x
bx y
b0xxxx n
b0xxxx v
bx _
bx `
b0xxxx M
b0xxxx ^
bx a
x|
bx O
b1xxxxxxx N
xc
xm
bx l
bx u
bx *
bx T
bx V
bx \
xW
bx U
bx0000000 ]
bx [
bx Y
bx R
bx Z
b1xxxxxxx S
bx X
bx Q
b1xxxxxxx P
b110 3
b111 2
bx 0
bx 7
bx L
bx b
bx k
bx {
bx $"
bx *"
bx 5
bx K
bx z
bx )"
b11111000100110 &
b11111000100110 &"
b110 9
xF
bx E
xJ
bx I
xH
bx G
xB
bx A
1!
#200
0!
#210
1+
b111 3
b1000 2
b111 9
bx &
bx &"
bx ("
bx %"
bx '"
bx100000010000000 '
bx100000010000000 }
bx #"
bx ""
bx )
bx i
bx j
bx f
bx d
b1xxxxxxx h
bx e
bx1111101 (
bx1111101 s
bx o
bx0000000 t
bx0000000 q
1!
#220
0!
